/* Generated By:JavaCC: Do not edit this line. EG1.java */
package application;
import java.util.HashMap;
import java.lang.StringBuilder;
import java.util.Iterator;

@SuppressWarnings("all")
public class EG1 implements EG1Constants {
  static ObjectContainer oc;
  public static void main(String [] args) throws ParseException
  {

    EG1 parser = new EG1(System.in);

    oc= new ObjectContainer();





    while (true)
    {


      System.out.print("Live Happy :D \u005cn");
      System.out.print("Enter an expression: ");
      try
      {
        switch (EG1.Sentence())
        {
          case 0 : System.out.println("Parser: Successful.");

          break;
          case 1 : System.out.println("Empty expression, please enter a new one:");
          break;
          default : break;
        }
      }
      catch (ParseException e)
      {
        System.out.println(e.getMessage());
        System.out.println("Parser: Errors have been found.");
        break;
      }
    }
  }

  static final public int Sentence() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case create:
      Create();
    {if (true) return 0;}
      break;
    case insert:
      Insert();
    {if (true) return 0;}
      break;
    case select:
      Select();
    {if (true) return 0;}
      break;
    case ENDLINE:
      jj_consume_token(ENDLINE);
    {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// When there is more than one parameter we must create more
// branches in order to create the syntax
  static final public void Create() throws ParseException {
 Token objectName, parameter1,type1,parameter2,type2;
    jj_consume_token(create);
    jj_consume_token(object);
    objectName = jj_consume_token(IDENTIFIER);
    jj_consume_token(INITSIMBOL);
    parameter1 = jj_consume_token(IDENTIFIER);
    type1 = jj_consume_token(TYPE);
    jj_consume_token(COMMA);
    parameter2 = jj_consume_token(IDENTIFIER);
    type2 = jj_consume_token(TYPE);
    jj_consume_token(ENDSIMBOL);
    jj_consume_token(ENDLINE);
   oc.createNewObjectBothParams(objectName.image , parameter1.image,type1.image,parameter2.image,type2.image);
  }

  static final public void BeginCreate() throws ParseException {
 Token t;
    jj_consume_token(create);
    jj_consume_token(object);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(INITSIMBOL);
    System.out.println("Hola "+t.image);
  }

  static final public void EndCreate() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDSIMBOL:
      jj_consume_token(ENDSIMBOL);
      jj_consume_token(ENDLINE);
      break;
    case COMMA:
      jj_consume_token(COMMA);
      Parameters();
      finalCreate();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FinalCreate works as a break cuz if it does not exist
// we could get a loop in witch will be admit more than two parameters
  static final public void finalCreate() throws ParseException {
    jj_consume_token(ENDSIMBOL);
    jj_consume_token(ENDLINE);
  }

  static final public void Insert() throws ParseException {
 Token parameter1,parameter2,objectName;
    jj_consume_token(insert);
    objectName = jj_consume_token(IDENTIFIER);
    jj_consume_token(INITSIMBOL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      parameter1 = jj_consume_token(IDENTIFIER);
      break;
    case NUMBER:
      parameter1 = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      parameter2 = jj_consume_token(IDENTIFIER);
      break;
    case NUMBER:
      parameter2 = jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ENDSIMBOL);
    jj_consume_token(ENDLINE);
    oc.insertBothObject(objectName.image,parameter1.image,parameter2.image);
  }

  static final public void Select() throws ParseException {
 Token parameter1,parameter2,objectName;
    jj_consume_token(select);
    parameter1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    parameter2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(from);
    objectName = jj_consume_token(IDENTIFIER);
    jj_consume_token(ENDLINE);
    System.out.println(oc.selectBothParameter(objectName.image,parameter1.image,parameter2.image));
  }

  static final public void Parameters() throws ParseException {
    oneParamameter();
  }

  static final public void oneParamameter() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TYPE);
  }

  static final public void twoParamameters() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TYPE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TYPE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EG1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x101a0,0x28000,0x1800,0x1800,};
   }

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

//====================================================================================================================================
//class object is like an template class
class Object
{
  String objectName;
  String name[];//name of the object
  String type[];//type of the object

  Integer [] number;
  String [] characters;
  Boolean [] booleans;

  //CONTRUCTORS*************************************************************************************        //this constructor try to convert the types of the class object and it is validate it.
        public Object(String objectName,String value,String type)
        {
          this.objectName =objectName;

        this.name=new String[2];
        this.type=new String[2];

          try
          {
                this.name[0]=value;
                this.type[0]=type;
                          if(type=="int")
                          {
                                number = new Integer [2];
                          }else if(type=="string"){
                                characters = new String [2];

                          }else if(type=="bool"){
                            booleans = new Boolean [2];
                          }


                }catch(Exception e)
                {
                  System.out.println("Error: "+e.toString());
                }
        }

        //this constructor try to convert the types of the class object and it is validate it.
        public Object(String objectName,String value1,String type1,String value2,String type2)
        {
                this.objectName =objectName;
                this.name=new String[2];
        this.type=new String[2];



        booleans = new Boolean [2];
          try
          {
                //set the types and names
                this.name[0]=value1;
                this.type[0]=type1;
                this.name[1]=value2;
                this.type[1]=type2;
                //and then inicialize the variables who the object will need.
                          if(type1.equals("int"))
                          {
                            number = new Integer [2];

                          }else if(type1.equals("string")){

                                characters = new String [2];

                          }else if(type1.equals("bool")){

                            booleans = new Boolean [2];
                          }
                          if(type2.equals("int"))
                          {

                            number = new Integer [2];

                          }else if(type2.equals("string")){
                                characters = new String [2];

                          }else if(type2.equals("bool")){
                            booleans = new Boolean [2];
                          }

                }catch(Exception e)
                {
                  System.out.println("Error: "+e.toString());
                }

        }
  public Object()
  {
        type = new String[2];
        name = new String[2];
    objectName = "";
    number = new Integer [2];
    characters = new String [2];
    booleans = new Boolean [2];
  }
//END CONSTRUCTORS**************************************************************************
        public String getObjectName()
        {
          return objectName;
        }
        public String[] getName()
        {
          return name;
        }
        public void setName(String[] name)
        {
          this.name=name;
        }

        public String[] getType()
        {
          return type;
        }
        public void setType(String[] type)
        {
          this.type=type;
        }

        public String[] getCharacters()
        {
          return characters;
        }
        public void setCharacters(String[] characters)
        {
          this.characters=characters;
        }

        public Integer[] getNumber()
        {
          return number;
        }
        public void setNumber(Integer[] number)
        {
          this.number=number;
        }
        public Boolean[] getBooleans()
        {
          return booleans;
        }
        public void setBooleans(Boolean[] booleans)
        {
          this.booleans=booleans;
        }




  public boolean setSingleParameter(String value)
  {
    if(type[0]!=null)
    {
      try
      {

              if(type[0]=="int")
              {
                number[0]=Integer.parseInt(value);
              }else if(type[0]=="string")
              {
                characters[0]=value;
              }else if(type[0]=="bool")
              {
                booleans[0]=Boolean.parseBoolean(value);
              }
              return true;
      }catch(Exception e)
      {
                System.out.println("Wrong set of characters");
      }

    }
    return false;
  }

  public boolean setBothParameter(String value,String value2)
        {
            if(type[0]!=null)
            {
              try
              {

                      if(type[0].equals("int"))
                      {
                        number[0]=Integer.parseInt(value);
                      }else if(type[0].equals("string"))
                      {
                        characters[0]=value;
                      }else if(type[0].equals("bool"))
                      {
                        booleans[0]=Boolean.parseBoolean(value);
                      }

                          if(type[1].equals("int"))
                      {
                        number[1]=Integer.parseInt(value2);
                      }else if(type[1].equals("string"))
                      {
                        characters[1]=value2;
                      }else if(type[1].equals("bool"))
                      {
                        booleans[1]=Boolean.parseBoolean(value2);
                      }
                      return true;
              }catch(Exception e)
              {
                        System.out.println("Wrong set of characters");
              }

            }
            return false;
    }

}

//====================================================================================================================================
//the Object container
class ObjectContainer
{
  HashMap < String, Object > list;

  public ObjectContainer()
  {
    list = new HashMap < String, Object > ();
  }

//*************************Select Methods*****************************************************************************
  //
  public String selectSingleParameter(String objectName,String parameter)
  {
    StringBuilder sb = new StringBuilder();
    Object o= list.get(objectName);
        if(o!=null){
            if(o.getName()[0]==parameter){
                     sb.append("Name- "+o.getObjectName()+" ");
                     if(o.getType()[0].equals("int"))
                     {
                        sb.append(""+o.getNumber()[0]+"");
                     }
                     else if(o.getType()[0].equals("string"))
                     {

                                sb.append(""+o.getCharacters()[0]+"");
                         }
                         else if(o.getType()[0].equals("bool"))
                     {
                        sb.append(""+o.getBooleans()[0]+"");
                     }

            }else if(o.getName()[1]==parameter)
            {
                     sb.append("Name- "+o.getObjectName()+" ");
                     if(o.getType()[1]=="int")
                     {
                        sb.append(""+o.getNumber()[1]+"");
                     }
                     else if(o.getType()[1]=="string")
                     {

                                sb.append(""+o.getNumber()[1]+"");
                         }
                         else if(o.getType()[1]=="bool")
                     {
                        sb.append(""+o.getBooleans()[1]+"");
                     }

        }
    }else{
      sb.append("The object:"+objectName+" dont exist..");
    }

    return sb.toString();
  }
        //Select both parameters
  public String selectBothParameter(String objectName,String parameter,String parameter2)
  {
    StringBuilder sb = new StringBuilder();
    Object o= list.get(objectName);
    if(o!=null){
            if(o.getName()[0].equals(parameter)&&o.getName()[1].equals(parameter2))
            {

                     sb.append("Object name: "+o.getObjectName()+" ");
                     String tipo=o.getType()[0];
                     if(tipo.equals("int"))
                     {

                        sb.append(" "+o.getNumber()[0]+" ");
                     }
                     else if(o.getType()[0].equals("string"))
                     {

                                sb.append(" "+o.getCharacters()[0]+" ");
                         }
                         else if(o.getType()[0].equals("bool"))
                     {

                        sb.append(" "+o.getBooleans()[0]+" ");
                     }
                     if(o.getType()[1].equals("int"))
                     {
                        sb.append(" "+o.getNumber()[1]+" ");
                     }
                     else if(o.getType()[1].equals("string"))
                     {

                                sb.append(" "+o.getCharacters()[1]+" ");
                         }
                         else if(o.getType()[1].equals("bool"))
                     {
                        sb.append(" "+o.getBooleans()[1]+" ");
                     }
            }
    }else{
      sb.append("The object:"+objectName+" dont exist..");
    }
    return sb.toString();

  }


  //************************************************************************

  //*****************CREATE*************************************************  //this will create a new object with 2 parameter and insert it, on the list.
        public boolean createNewObjectBothParams(String nameObject,String sentence, String type,String sentence2,String type2)
        {       if(!list.containsKey(nameObject))
                {
                   try
                   {
                                Object newObject = new Object(nameObject,sentence,type,sentence2,type2);
                                list.put(nameObject,newObject);
                                return true;
                   }catch(Exception e)
                   {
                     System.out.println("Error to create new object...");
                   }
                 }else
                 {
                   System.out.println("The object already exist");
                 }

                return false;
        }


        //this will create a new object with 1 parameter and insert it, on the list.
        public boolean createNewObjectSingleParams(String nameObject,String sentence, String type)
        {
                        try
                        {

                        Object newObject = new Object(nameObject,sentence,type);
                        list.put(nameObject,newObject);
                        return true;
                  }catch(Exception e)
                  {
                    System.out.println("Error to create new object...");
                  }
                return false;
        }


//**********************************************************************************************************************

//****************************************Insert********************************************************************

public void insertSingleObject(String nameObject, String value)
{

  try
  {
     list.get(nameObject).setSingleParameter(value);
  }catch(Exception e)
  {
    System.out.println("The object:"+nameObject+" dont exist..");
  }

}

public void insertBothObject(String nameObject, String value,String value2)
{

  try{
    list.get(nameObject).setBothParameter(value,value2);
  }catch(Exception e){
    System.out.println("The object:"+nameObject+" dont exist..");
  }
}

}
