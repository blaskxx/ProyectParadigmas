/* Generated By:JavaCC: Do not edit this line. EG1.java */
package application;

@SuppressWarnings("all")
public class EG1 implements EG1Constants {
  public static void main( String[] args )throws ParseException
        {
          EG1 parser = new EG1( System.in ) ;
          while (true)
          {
            System.out.print("Live Happy :D ");
                System.out.print("Enter an expression: ");

                        try
                        {
                          switch (EG1.Sentence())
                  {
                  case 0 :
                  System.out.println("Parser: Successful.");
                  break;

                  case 1 :
                  System.out.println("Empty expression, please enter a new one:");
                  break;

                  default :
                  break;
                  }
                        }
                        catch(ParseException e)
                        {
                                System.out.println(e.getMessage());
                                System.out.println("Parser: Errors have been found.");
                                break;
                        }
                }
        }

  static final public int Sentence() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case create:
      Create();
                {if (true) return 0;}
      break;
    case insert:
      Insert();
        {if (true) return 0;}
      break;
    case select:
      Select();
        {if (true) return 0;}
      break;
    case ENDLINE:
      jj_consume_token(ENDLINE);
        {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// When there is more than one parameter we must create more
// branches in order to create the syntax
  static final public void Create() throws ParseException {
    BeginCreate();
    oneParamameter();
    EndCreate();
  }

  static final public void BeginCreate() throws ParseException {
    jj_consume_token(create);
    jj_consume_token(object);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(INITSIMBOL);
  }

  static final public void EndCreate() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDSIMBOL:
      jj_consume_token(ENDSIMBOL);
      jj_consume_token(ENDLINE);
      break;
    case COMMA:
      jj_consume_token(COMMA);
      Parameters();
      finalCreate();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FinalCreate works as a break cuz if it does not exist
// we could get a loop in witch will be admit more than two parameters
  static final public void finalCreate() throws ParseException {
    jj_consume_token(ENDSIMBOL);
    jj_consume_token(ENDLINE);
  }

  static final public void Insert() throws ParseException {
    jj_consume_token(insert);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(INITSIMBOL);
    ParamameterValue();
    jj_consume_token(COMMA);
    ParamameterValue();
    jj_consume_token(ENDSIMBOL);
    jj_consume_token(ENDLINE);
  }

  static final public void Select() throws ParseException {
    jj_consume_token(select);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(from);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ENDLINE);
  }

  static final public void Parameters() throws ParseException {
    oneParamameter();
  }

  static final public void oneParamameter() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TYPE);
  }

  static final public void ParamameterValue() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  static final public void twoParamameters() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TYPE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TYPE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EG1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x101a0,0x28000,};
   }

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
