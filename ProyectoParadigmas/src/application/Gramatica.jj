/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.8";  static = true;  COMMON_TOKEN_ACTION = false;  TOKEN_MANAGER_USES_PARSER = true;}PARSER_BEGIN(EG1)package application;import java.util.HashMap;import java.lang.StringBuilder;
import java.util.Iterator;public class EG1{  public static void main(String [] args) throws ParseException  {    EG1 parser = new EG1(System.in);
    //prueba de metodos.........................
    ObjectContainer oc= new ObjectContainer();
    
    //CREATE METHODS
    //create object Prueba(atributo1,string);
    oc.createNewObjectSingleParams("Prueba","atributo1","string");
    oc.createNewObjectSingleParams("Enteros","x","int");
    //create object Objeto2(atri1,int,atri2,bool);
    oc.createNewObjectBothParams("Objeto2","atri1","int","atri2","bool");
    

    //SELECT METHODS
    //Select prueba atributo1
    System.out.println(oc.selectSingleParameter("Prueba","atributo1")+"\n");
    
    //Select objeto2 atri1,atri2
    System.out.println(oc.selectBothParameter("Objeto2","atri1","atri2")+"\n");

    //INSERT METHODS
    oc.insertSingleObject("Enteros","123");
    oc.insertSingleObject("Prueba","annadiendoatri");
    oc.insertBothObject("Objeto2", "24","true");
    System.out.println(oc.selectSingleParameter("Enteros","x")+"\n");
	//Select prueba atributo1
    System.out.println(oc.selectSingleParameter("Prueba","atributo1")+"\n");
    //Select objeto2 atri1,atri2
    System.out.println(oc.selectBothParameter("Objeto2","atri1","atri2")+"\n");
    while (true)    {
	
            System.out.print("Live Happy :D \n");      System.out.print("Enter an expression: ");      try      {        switch (EG1.Sentence())        {          case 0 : System.out.println("Parser: Successful.");          
          break;          case 1 : System.out.println("Empty expression, please enter a new one:");          break;          default : break;        }      }      catch (ParseException e)      {        System.out.println(e.getMessage());        System.out.println("Parser: Errors have been found.");        break;      }    }  }}//EG1.DoAction();//====================================================================================================================================
//class object is like an template class
class Object{  String objectName;
  String name[];//name of the object
  String type[];//type of the object
    Integer [] number;  String [] characters;  Boolean [] booleans;

  //CONTRUCTORS*************************************************************************************	//this constructor try to convert the types of the class object and it is validate it.
	public Object(String objectName,String value,String type)	{
	  this.objectName =objectName;
	  
    	this.name=new String[2];
    	this.type=new String[2];
    	
	  try
	  {
	    	this.name[0]=value;
	    	this.type[0]=type;
			  if(type=="int")
			  {
			   	number = new Integer [2];
			  }else if(type=="string"){
			  	characters = new String [2];
			  
			  }else if(type=="bool"){
			    booleans = new Boolean [2];
			  }
			  
			  
		}catch(Exception e)
		{
		  System.out.println("Error: "+e.toString());
		}	}

	//this constructor try to convert the types of the class object and it is validate it.
	public Object(String objectName,String value1,String type1,String value2,String type2)
	{
		this.objectName =objectName;
		this.name=new String[2];
    	this.type=new String[2];
		
    	
    	
    	booleans = new Boolean [2];
	  try	  {
	    	//set the types and names
	    	this.name[0]=value1;
    		this.type[0]=type1;
    		this.name[1]=value2;
    		this.type[1]=type2;
    		//and then inicialize the variables who the object will need.
			  if(type1=="int")			  {
			    number = new Integer [2];
			     			  }else if(type1=="string"){
			    
			  	characters = new String [2];			  			  }else if(type1=="bool"){
			    
			    booleans = new Boolean [2];			  }
			  if(type2=="int")
			  {
			    
			    number = new Integer [2];
			    
			  }else if(type2=="string"){
			  	characters = new String [2];
			  
			  }else if(type2=="bool"){
			    booleans = new Boolean [2];
			  }
			  		}catch(Exception e)		{
		  System.out.println("Error: "+e.toString());		}	
	}  public Object()  {
  	type = new String[2];
  	name = new String[2];    objectName = "";    number = new Integer [2];    characters = new String [2];    booleans = new Boolean [2];  }
//END CONSTRUCTORS**************************************************************************
	public String getObjectName()	{
	  return objectName;	}
	public String[] getName()
	{
	  return name;
	}
	public void setName(String[] name)
	{
	  this.name=name;
	}

	public String[] getType()
	{
	  return type;
	}
	public void setType(String[] type)
	{
	  this.type=type;
	}

	public String[] getCharacters()	{
	  return characters;	}
	public void setCharacters(String[] characters)	{
	  this.characters=characters;	}

	public Integer[] getNumber()
	{
	  return number;
	}
	public void setNumber(Integer[] number)
	{
	  this.number=number;
	}
	public Boolean[] getBooleans()
	{
	  return booleans;
	}
	public void setBooleans(Boolean[] booleans)
	{
	  this.booleans=booleans;
	}
	
  
  

  public boolean setSingleParameter(String value)  {
    if(type[0]!=null)    {
      try      {        
	      if(type[0]=="int")	      {
	        number[0]=Integer.parseInt(value);	      }else if(type[0]=="string")	      {
	        characters[0]=value;	      }else if(type[0]=="bool")	      {
	        booleans[0]=Boolean.parseBoolean(value);	      }
	      return true;      }catch(Exception e)      {
      		System.out.println("Wrong set of characters");       }        }
    return false;  }
  
  public boolean setBothParameter(String value,String value2)
	{
	    if(type[0]!=null)
	    {
	      try
	      {
	        
		      if(type[0]=="int")
		      {
		        number[0]=Integer.parseInt(value);
		      }else if(type[0]=="string")
		      {
		        characters[0]=value;
		      }else if(type[0]=="bool")
		      {
		        booleans[0]=Boolean.parseBoolean(value);
		      }
		      
			  if(type[1]=="int")
		      {
		        number[1]=Integer.parseInt(value2);
		      }else if(type[1]=="string")
		      {
		        characters[1]=value2;
		      }else if(type[1]=="bool")
		      {
		        booleans[1]=Boolean.parseBoolean(value2);
		      }
		      return true;
	      }catch(Exception e)
	      {
	      		System.out.println("Wrong set of characters"); 
	      }
	    
	    }
	    return false;
    }
  }//====================================================================================================================================
//the Object container
class ObjectContainer{  HashMap < String, Object > list;  public ObjectContainer()  {    list = new HashMap < String, Object > ();  }
//*************************Select Methods*****************************************************************************  
  //
  public String selectSingleParameter(String objectName,String parameter)  {
    StringBuilder sb = new StringBuilder();
    Object o= list.get(objectName);
    
    if(o.getName()[0]==parameter)    {
	     sb.append("Name- "+o.getObjectName()+" ");
	     if(o.getType()[0]=="int")	     {	      	sb.append(""+o.getNumber()[0]+"");	     }
	     else if(o.getType()[0]=="string")	     {	       
		 	sb.append(""+o.getCharacters()[0]+"");		 }		 else if(o.getType()[0]=="bool")	     {
	     	sb.append(""+o.getBooleans()[0]+""); 	     }         }else if(o.getName()[1]==parameter)
    {
	     sb.append("Name- "+o.getObjectName()+" ");
	     if(o.getType()[1]=="int")
	     {
	      	sb.append(""+o.getNumber()[1]+"");
	     }
	     else if(o.getType()[1]=="string")
	     {
	       
		 	sb.append(""+o.getNumber()[1]+"");
		 }
		 else if(o.getType()[1]=="bool")
	     {
	     	sb.append(""+o.getBooleans()[1]+""); 
	     }
     
    }
    return sb.toString();  }
	//Select both parameters
  public String selectBothParameter(String objectName,String parameter,String parameter2)
  {
    StringBuilder sb = new StringBuilder();
    Object o= list.get(objectName);
    
    if(o.getName()[0].equals(parameter)&&o.getName()[1].equals(parameter2))
    {
    
	     sb.append("Name- "+o.getObjectName()+" ");
	     if(o.getType()[0]=="int")
	     {
	
	      	sb.append(""+o.getNumber()[0]+"");
	     }
	     else if(o.getType()[0]=="string")
	     {
	       
		 	sb.append(""+o.getNumber()[0]+"");
		 }
		 else if(o.getType()[0].equals("bool"))
	     {
	
	     	sb.append(""+o.getBooleans()[0]+""); 
	     }
	     if(o.getType()[1]=="int")
	     {
	      	sb.append(""+o.getNumber()[1]+"");
	     }
	     else if(o.getType()[1]=="string")
	     {
	       
		 	sb.append(""+o.getNumber()[1]+"");
		 }
		 else if(o.getType()[1]=="bool")
	     {
	     	sb.append(""+o.getBooleans()[1]+""); 
	     }
    }
    
    return sb.toString();
    
  }

  
  //************************************************************************

  //*****************CREATE*************************************************  //this will create a new object with 2 parameter and insert it, on the list.
	public boolean createNewObjectBothParams(String nameObject,String sentence, String type,String sentence2,String type2)	{
	  		try	  		{
				Object newObject = new Object(nameObject,sentence,type,sentence2,type2);
		  		list.put(nameObject,newObject);
		  		return true;
	  }catch(Exception e)	  {
	    System.out.println("Error to create new object...");	  }		return false;	}

	
	//this will create a new object with 1 parameter and insert it, on the list.
	public boolean createNewObjectSingleParams(String nameObject,String sentence, String type)
	{
	  		try
	  		{
	  		  
			Object newObject = new Object(nameObject,sentence,type);
	  		list.put(nameObject,newObject);
	  		return true;
		  }catch(Exception e)
		  {
		    System.out.println("Error to create new object...");
		  }
		return false;
	}
	

//**********************************************************************************************************************

//****************************************Insert********************************************************************

public boolean insertSingleObject(String nameObject, String value){
  Object o=list.get(nameObject);
  if(o!=null)  {
    return list.get(nameObject).setSingleParameter(value);  }
  return false;}

public boolean insertBothObject(String nameObject, String value,String value2)
{
  Object o=list.get(nameObject);
  if(o!=null)
  {
    return list.get(nameObject).setBothParameter(value,value2);
  }
  return false;
}
}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* RESERVED WORDS */{  < create : "CREATE" >| < object : "OBJECT" >| < insert : "INSERT" >| < select : "SELECT" >| < from : "FROM" >}TOKEN :{  < TYPE :    "int"  | "bool"  | "string" >| < NUMBER : ([ "0"-"9" ])+ >| < IDENTIFIER : [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >| < STRING : [ "a"-"z", "A"-"Z", "0"-"9" ] ([ "a"-"z", "A"-"Z", "0"-"9" ])* >}TOKEN : /* SYMBOL */{  < INITSIMBOL : "(" >| < ENDSIMBOL : ")" >| < ENDLINE : ";" >| < COMMA : "," >}boolean DoAction() :{}{  Create()  {    return true;  }| Insert()  {    return true;  }  Select()  {    return true;  }| < ENDLINE >  {    return false;  }}int Sentence() :{}{  Create()  {    return 0;  }| Insert()  {    return 0;  }| Select()  {    return 0;  }| < ENDLINE >  {    return 1;  }}// When there is more than one parameter we must create more
// branches in order to create the syntax
void Create() :{}{  BeginCreate() oneParamameter() EndCreate()  {}}void BeginCreate() :{}{  < create > < object > < IDENTIFIER > < INITSIMBOL >}void EndCreate() :{}{  < ENDSIMBOL > < ENDLINE >| < COMMA > Parameters() finalCreate()}// FinalCreate works as a break cuz if it does not exist
// we could get a loop in witch will be admit more than two parameters
void finalCreate() :{}{  < ENDSIMBOL > < ENDLINE >}void Insert() :{}{  < insert > < IDENTIFIER > < INITSIMBOL > ParamameterValue() < COMMA > ParamameterValue() < ENDSIMBOL > < ENDLINE >}void Select() :{}{  < select > < IDENTIFIER > < COMMA > < IDENTIFIER > < from > < IDENTIFIER > < ENDLINE >}void Parameters() :{}{  oneParamameter()  //globalDeclaration() | Principal()
}void oneParamameter() :{}{  < IDENTIFIER > < TYPE >}void ParamameterValue() :{}{  < IDENTIFIER >|< NUMBER >}void twoParamameters() :{}{  < IDENTIFIER > < TYPE > < IDENTIFIER > < TYPE >}