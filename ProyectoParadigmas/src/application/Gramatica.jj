/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.8";  static = true;}PARSER_BEGIN(EG1)package application;

public class EG1{  public static void main( String[] args )throws ParseException
	{
	  EG1 parser = new EG1( System.in ) ;
	  while (true)
	  {
	    System.out.print("Live Happy :D ");	   	System.out.print("Enter an expression: ");
	   
			try
			{
			  switch (EG1.Sentence())
	       	  {
	          case 0 :	
	          System.out.println("Parser: Successful.");
	          break;
	          
	          case 1 : 
	          System.out.println("Empty expression, please enter a new one:");
	          break;
	          
	          default : 
	          break;
	          }	
			}
			catch(ParseException e)
			{
				System.out.println(e.getMessage());
				System.out.println("Parser: Errors have been found.");
				break;
			}
		}	
	}}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"}
TOKEN : /* RESERVED WORDS */
{
  < create : "CREATE" >
| < object : "OBJECT" >
| < insert : "INSERT" >
| < select : "SELECT" >
| < from   : "FROM"   > 
}
TOKEN: 
{
	  <TYPE   :"int"|"bool"|"string">
	| <NUMBER : (["0"-"9"])+ >
	| <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*> 
	| <STRING : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*>
}
TOKEN : /* SYMBOL */
{
  < INITSIMBOL  : "(" >
| < ENDSIMBOL   : ")" >
| < ENDLINE     : ";" >
| < COMMA       : ",">
}

int Sentence() :
{}
{
	Create() 	{		return 0;
	}
    	
   |Insert()
    {
       	return 0;    }
   |Select()
   {
     	return 0;   } 
   |<ENDLINE>
    {
      	return 1;    }
}
// When there is more than one parameter we must create more
// branches in order to create the syntax
void Create() : 
{}
{
  BeginCreate()oneParamameter()EndCreate()
	}
void BeginCreate():
{}
{
  <create><object><IDENTIFIER><INITSIMBOL>}
void EndCreate():
{}
{
  <ENDSIMBOL><ENDLINE>
  |<COMMA>Parameters()finalCreate()
}
// FinalCreate works as a break cuz if it does not exist
// we could get a loop in witch will be admit more than two parameters

 void finalCreate():
{}
{
  <ENDSIMBOL><ENDLINE>
  
}

void Insert():
{}
{
  <insert><IDENTIFIER><INITSIMBOL>ParamameterValue()<COMMA>ParamameterValue()<ENDSIMBOL><ENDLINE>
	
}
void Select():
{}
{
  <select><IDENTIFIER><COMMA><IDENTIFIER><from><IDENTIFIER><ENDLINE>
	
}

void Parameters():
{}
{
	oneParamameter() 	
//globalDeclaration() | Principal()
}
void oneParamameter():
{}
{
	<IDENTIFIER><TYPE>	
}
void ParamameterValue():
{}
{
	<IDENTIFIER>	
}

void twoParamameters():
{}
{
	<IDENTIFIER><TYPE><IDENTIFIER><TYPE>
}